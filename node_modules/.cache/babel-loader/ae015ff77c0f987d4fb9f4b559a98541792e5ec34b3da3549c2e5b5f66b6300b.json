{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialAchievements = [{\n  id: 'first-lesson',\n  title: 'First Steps',\n  description: 'Complete your first lesson',\n  icon: 'üéØ',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 1\n}, {\n  id: 'quiz-master',\n  title: 'Quiz Master',\n  description: 'Get 100% on a quiz',\n  icon: 'üèÜ',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 1\n}, {\n  id: 'curious-mind',\n  title: 'Curious Mind',\n  description: 'Ask Simba 10 questions',\n  icon: 'ü§î',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 10\n}, {\n  id: 'streak-starter',\n  title: 'Streak Starter',\n  description: 'Learn for 3 days in a row',\n  icon: 'üî•',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 3\n}, {\n  id: 'science-explorer',\n  title: 'Science Explorer',\n  description: 'Complete 5 different lessons',\n  icon: 'üî¨',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 5\n}, {\n  id: 'gravity-guru',\n  title: 'Gravity Guru',\n  description: 'Master the gravity lesson',\n  icon: 'üåç',\n  unlocked: false,\n  progress: 0,\n  maxProgress: 1\n}];\nconst initialState = {\n  achievements: initialAchievements,\n  totalUnlocked: 0,\n  recentlyUnlocked: []\n};\nconst achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    updateAchievementProgress: (state, action) => {\n      const achievement = state.achievements.find(a => a.id === action.payload.achievementId);\n      if (achievement && !achievement.unlocked) {\n        achievement.progress = Math.min(action.payload.progress, achievement.maxProgress);\n        if (achievement.progress >= achievement.maxProgress) {\n          achievement.unlocked = true;\n          achievement.unlockedAt = Date.now();\n          state.totalUnlocked += 1;\n          state.recentlyUnlocked.push(achievement.id);\n        }\n      }\n    },\n    unlockAchievement: (state, action) => {\n      const achievement = state.achievements.find(a => a.id === action.payload);\n      if (achievement && !achievement.unlocked) {\n        achievement.unlocked = true;\n        achievement.unlockedAt = Date.now();\n        achievement.progress = achievement.maxProgress;\n        state.totalUnlocked += 1;\n        state.recentlyUnlocked.push(achievement.id);\n      }\n    },\n    clearRecentlyUnlocked: state => {\n      state.recentlyUnlocked = [];\n    }\n  }\n});\nexport const {\n  updateAchievementProgress,\n  unlockAchievement,\n  clearRecentlyUnlocked\n} = achievementSlice.actions;\nexport default achievementSlice.reducer;","map":{"version":3,"names":["createSlice","initialAchievements","id","title","description","icon","unlocked","progress","maxProgress","initialState","achievements","totalUnlocked","recentlyUnlocked","achievementSlice","name","reducers","updateAchievementProgress","state","action","achievement","find","a","payload","achievementId","Math","min","unlockedAt","Date","now","push","unlockAchievement","clearRecentlyUnlocked","actions","reducer"],"sources":["/Users/bilal/Documents/GitHub/scifly/src/features/achievements/achievementSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface Achievement {\n  id: string\n  title: string\n  description: string\n  icon: string\n  unlocked: boolean\n  unlockedAt?: number\n  progress: number\n  maxProgress: number\n}\n\ninterface AchievementState {\n  achievements: Achievement[]\n  totalUnlocked: number\n  recentlyUnlocked: string[]\n}\n\nconst initialAchievements: Achievement[] = [\n  {\n    id: 'first-lesson',\n    title: 'First Steps',\n    description: 'Complete your first lesson',\n    icon: 'üéØ',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 1\n  },\n  {\n    id: 'quiz-master',\n    title: 'Quiz Master',\n    description: 'Get 100% on a quiz',\n    icon: 'üèÜ',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 1\n  },\n  {\n    id: 'curious-mind',\n    title: 'Curious Mind',\n    description: 'Ask Simba 10 questions',\n    icon: 'ü§î',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 10\n  },\n  {\n    id: 'streak-starter',\n    title: 'Streak Starter',\n    description: 'Learn for 3 days in a row',\n    icon: 'üî•',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 3\n  },\n  {\n    id: 'science-explorer',\n    title: 'Science Explorer',\n    description: 'Complete 5 different lessons',\n    icon: 'üî¨',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 5\n  },\n  {\n    id: 'gravity-guru',\n    title: 'Gravity Guru',\n    description: 'Master the gravity lesson',\n    icon: 'üåç',\n    unlocked: false,\n    progress: 0,\n    maxProgress: 1\n  }\n]\n\nconst initialState: AchievementState = {\n  achievements: initialAchievements,\n  totalUnlocked: 0,\n  recentlyUnlocked: [],\n}\n\nconst achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    updateAchievementProgress: (state, action: PayloadAction<{ achievementId: string; progress: number }>) => {\n      const achievement = state.achievements.find(a => a.id === action.payload.achievementId)\n      if (achievement && !achievement.unlocked) {\n        achievement.progress = Math.min(action.payload.progress, achievement.maxProgress)\n        \n        if (achievement.progress >= achievement.maxProgress) {\n          achievement.unlocked = true\n          achievement.unlockedAt = Date.now()\n          state.totalUnlocked += 1\n          state.recentlyUnlocked.push(achievement.id)\n        }\n      }\n    },\n    unlockAchievement: (state, action: PayloadAction<string>) => {\n      const achievement = state.achievements.find(a => a.id === action.payload)\n      if (achievement && !achievement.unlocked) {\n        achievement.unlocked = true\n        achievement.unlockedAt = Date.now()\n        achievement.progress = achievement.maxProgress\n        state.totalUnlocked += 1\n        state.recentlyUnlocked.push(achievement.id)\n      }\n    },\n    clearRecentlyUnlocked: (state) => {\n      state.recentlyUnlocked = []\n    },\n  },\n})\n\nexport const { updateAchievementProgress, unlockAchievement, clearRecentlyUnlocked } = achievementSlice.actions\nexport default achievementSlice.reducer "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}