{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  currentLesson: null,\n  lessons: [{\n    id: 'gravity',\n    title: 'What is Gravity?',\n    completed: false,\n    progress: 0\n  }, {\n    id: 'solar-system',\n    title: 'Our Solar System',\n    completed: false,\n    progress: 0\n  }, {\n    id: 'water-cycle',\n    title: 'The Water Cycle',\n    completed: false,\n    progress: 0\n  }, {\n    id: 'plants',\n    title: 'How Plants Grow',\n    completed: false,\n    progress: 0\n  }],\n  dailyGoal: 4,\n  dailyProgress: 0,\n  totalScore: 0,\n  streak: 0\n};\nconst progressSlice = createSlice({\n  name: 'progress',\n  initialState,\n  reducers: {\n    setCurrentLesson: (state, action) => {\n      state.currentLesson = action.payload;\n    },\n    updateLessonProgress: (state, action) => {\n      const lesson = state.lessons.find(l => l.id === action.payload.lessonId);\n      if (lesson) {\n        lesson.progress = action.payload.progress;\n        if (action.payload.progress >= 100) {\n          lesson.completed = true;\n          state.dailyProgress += 1;\n          state.totalScore += 10;\n        }\n      }\n    },\n    incrementStreak: state => {\n      state.streak += 1;\n    },\n    resetDailyProgress: state => {\n      state.dailyProgress = 0;\n    }\n  }\n});\nexport const {\n  setCurrentLesson,\n  updateLessonProgress,\n  incrementStreak,\n  resetDailyProgress\n} = progressSlice.actions;\nexport default progressSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentLesson","lessons","id","title","completed","progress","dailyGoal","dailyProgress","totalScore","streak","progressSlice","name","reducers","setCurrentLesson","state","action","payload","updateLessonProgress","lesson","find","l","lessonId","incrementStreak","resetDailyProgress","actions","reducer"],"sources":["/Users/bilal/Documents/GitHub/scifly/src/features/progress/progressSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface Lesson {\n  id: string\n  title: string\n  completed: boolean\n  progress: number\n}\n\ninterface ProgressState {\n  currentLesson: string | null\n  lessons: Lesson[]\n  dailyGoal: number\n  dailyProgress: number\n  totalScore: number\n  streak: number\n}\n\nconst initialState: ProgressState = {\n  currentLesson: null,\n  lessons: [\n    { id: 'gravity', title: 'What is Gravity?', completed: false, progress: 0 },\n    { id: 'solar-system', title: 'Our Solar System', completed: false, progress: 0 },\n    { id: 'water-cycle', title: 'The Water Cycle', completed: false, progress: 0 },\n    { id: 'plants', title: 'How Plants Grow', completed: false, progress: 0 },\n  ],\n  dailyGoal: 4,\n  dailyProgress: 0,\n  totalScore: 0,\n  streak: 0,\n}\n\nconst progressSlice = createSlice({\n  name: 'progress',\n  initialState,\n  reducers: {\n    setCurrentLesson: (state, action: PayloadAction<string>) => {\n      state.currentLesson = action.payload\n    },\n    updateLessonProgress: (state, action: PayloadAction<{ lessonId: string; progress: number }>) => {\n      const lesson = state.lessons.find(l => l.id === action.payload.lessonId)\n      if (lesson) {\n        lesson.progress = action.payload.progress\n        if (action.payload.progress >= 100) {\n          lesson.completed = true\n          state.dailyProgress += 1\n          state.totalScore += 10\n        }\n      }\n    },\n    incrementStreak: (state) => {\n      state.streak += 1\n    },\n    resetDailyProgress: (state) => {\n      state.dailyProgress = 0\n    },\n  },\n})\n\nexport const { setCurrentLesson, updateLessonProgress, incrementStreak, resetDailyProgress } = progressSlice.actions\nexport default progressSlice.reducer "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAkB7D,MAAMC,YAA2B,GAAG;EAClCC,aAAa,EAAE,IAAI;EACnBC,OAAO,EAAE,CACP;IAAEC,EAAE,EAAE,SAAS;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,SAAS,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAC3E;IAAEH,EAAE,EAAE,cAAc;IAAEC,KAAK,EAAE,kBAAkB;IAAEC,SAAS,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAChF;IAAEH,EAAE,EAAE,aAAa;IAAEC,KAAK,EAAE,iBAAiB;IAAEC,SAAS,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAC9E;IAAEH,EAAE,EAAE,QAAQ;IAAEC,KAAK,EAAE,iBAAiB;IAAEC,SAAS,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAE,CAAC,CAC1E;EACDC,SAAS,EAAE,CAAC;EACZC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,CAAC;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,aAAa,GAAGZ,WAAW,CAAC;EAChCa,IAAI,EAAE,UAAU;EAChBZ,YAAY;EACZa,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACd,aAAa,GAAGe,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,oBAAoB,EAAEA,CAACH,KAAK,EAAEC,MAA6D,KAAK;MAC9F,MAAMG,MAAM,GAAGJ,KAAK,CAACb,OAAO,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKa,MAAM,CAACC,OAAO,CAACK,QAAQ,CAAC;MACxE,IAAIH,MAAM,EAAE;QACVA,MAAM,CAACb,QAAQ,GAAGU,MAAM,CAACC,OAAO,CAACX,QAAQ;QACzC,IAAIU,MAAM,CAACC,OAAO,CAACX,QAAQ,IAAI,GAAG,EAAE;UAClCa,MAAM,CAACd,SAAS,GAAG,IAAI;UACvBU,KAAK,CAACP,aAAa,IAAI,CAAC;UACxBO,KAAK,CAACN,UAAU,IAAI,EAAE;QACxB;MACF;IACF,CAAC;IACDc,eAAe,EAAGR,KAAK,IAAK;MAC1BA,KAAK,CAACL,MAAM,IAAI,CAAC;IACnB,CAAC;IACDc,kBAAkB,EAAGT,KAAK,IAAK;MAC7BA,KAAK,CAACP,aAAa,GAAG,CAAC;IACzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM,gBAAgB;EAAEI,oBAAoB;EAAEK,eAAe;EAAEC;AAAmB,CAAC,GAAGb,aAAa,CAACc,OAAO;AACpH,eAAed,aAAa,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}